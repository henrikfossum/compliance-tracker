{% comment %}
  @name Premium Price Compliance Widget
  @description Elegant display of price information compliant with Norwegian pricing regulations
  @icon price-lookup
  @category products
{% endcomment %}

<div class="premium-compliance-container" 
     data-product-id="{{ product.id }}" 
     data-variant-id="{{ product.selected_or_first_available_variant.id }}"
     data-display-style="{{ block.settings.display_style }}"
     style="
        --background-color: {{ block.settings.background_color }};
        --text-color: {{ block.settings.text_color }};
        --sale-price-color: {{ block.settings.sale_price_color }};
        --reference-price-color: {{ block.settings.reference_price_color }};
        --accent-color: {{ block.settings.accent_color }};
        --border-color: {{ block.settings.border_color }};
        --border-width: {{ block.settings.border_width }}px;
        --border-style: {{ block.settings.border_style }};
        --border-radius: {{ block.settings.border_radius }}px;
        --font-size: {{ block.settings.font_size }}px;
        --shadow-intensity: {{ block.settings.shadow_intensity }};
     ">
  
  <div class="premium-compliance-pricing">
    {% if product.compare_at_price > product.price %}
      <!-- Sale Mode - Pricing Information -->
      <div class="price-section">
        <div class="current-price-section">
          <span class="current-price">{{ product.price | money }}</span>
          {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round %}
          {% assign discount_text = block.settings.discount_label | replace: "{percent}", discount_percentage %}
          <span class="discount-badge">{{ discount_text }}</span>
        </div>
        
        <!-- Reference Price - Key for Compliance -->
        <div class="reference-price-section">
          <div class="reference-price-content">
            <span class="reference-price">{{ product.compare_at_price | money }}</span>
            <span class="reference-price-label">{{ block.settings.reference_price_label }}</span>
            <div class="compliance-note">According to Norwegian regulations, this is the lowest price used in the last 30 days.</div>
          </div>
          <div class="reference-price-icon">
            <svg viewBox="0 0 24 24" width="18" height="18">
              <path fill="currentColor" d="M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Sale Period Information -->
      {% if product.metafields.compliance.sale_start_date %}
        <div class="sale-period-section">
          <div class="sale-period-icon">
            <svg viewBox="0 0 24 24" width="16" height="16">
              <path fill="currentColor" d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"></path>
            </svg>
          </div>
          <span class="sale-period">{{ block.settings.sale_period_label }}: 
            {{ product.metafields.compliance.sale_start_date | date: "%d.%m.%Y" }} 
            {% if product.metafields.compliance.sale_end_date %} 
              - {{ product.metafields.compliance.sale_end_date | date: "%d.%m.%Y" }}
            {% endif %}
          </span>
        </div>
      {% endif %}
      
      <!-- Regular price if available and if display style is detailed -->
      {% if block.settings.display_style == 'detailed' and product.metafields.compliance.original_price %}
        <div class="regular-price-section">
          <span class="regular-price-label">{{ block.settings.regular_price_label }}:</span>
          <span class="regular-price">{{ product.metafields.compliance.original_price | money }}</span>
        </div>
      {% endif %}
      
    {% else %}
      <!-- Regular price mode - show simplified display -->
      <div class="regular-mode-section">
        <div class="regular-price-info">
          <span class="current-price regular">{{ product.price | money }}</span>
          <span class="regular-price-label">{{ block.settings.regular_price_label }}</span>
        </div>
        
        {% if block.settings.display_style == 'detailed' and product.metafields.compliance.price_tracking_since %}
          <div class="tracking-info">
            <div class="tracking-icon">
              <svg viewBox="0 0 24 24" width="16" height="16">
                <path fill="currentColor" d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"></path>
              </svg>
            </div>
            <span class="tracking-since">{{ block.settings.tracking_since_label }}: {{ product.metafields.compliance.price_tracking_since | date: "%d.%m.%Y" }}</span>
          </div>
        {% endif %}
      </div>
    {% endif %}
  </div>
  
  {% if block.settings.show_price_history and product.metafields.compliance.price_history %}
    <div class="price-history-container">
      <details class="price-history-details">
        <summary>
          <span class="summary-icon">
            <svg viewBox="0 0 24 24" width="18" height="18">
              <path fill="currentColor" d="M16,6L18.29,8.29L13.41,13.17L9.41,9.17L2,16.59L3.41,18L9.41,12L13.41,16L19.71,9.71L22,12V6H16Z"></path>
            </svg>
          </span>
          <span class="summary-text">{{ block.settings.price_history_label }}</span>
        </summary>
        <div class="price-history-graph" data-history="{{ product.metafields.compliance.price_history | json }}">
          <!-- Price history graph will be rendered by JavaScript -->
          <div class="price-history-placeholder">
            <div class="loading-spinner"></div>
            <span>{{ block.settings.loading_label }}</span>
          </div>
        </div>
      </details>
    </div>
  {% endif %}
  
      {% if block.settings.show_compliance_status %}
    <div class="compliance-status {% if product.metafields.compliance.is_compliant != false %}compliant{% else %}non-compliant{% endif %}">
      <span class="compliance-icon">
        {% if product.metafields.compliance.is_compliant != false %}
          <svg viewBox="0 0 24 24" width="20" height="20">
            <path fill="currentColor" d="M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z"></path>
          </svg>
        {% else %}
          <svg viewBox="0 0 24 24" width="20" height="20">
            <path fill="currentColor" d="M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"></path>
          </svg>
        {% endif %}
      </span>
      <span class="compliance-text">
        {% if product.metafields.compliance.is_compliant != false %}
          {{ block.settings.compliant_message }}
        {% else %}
          {{ block.settings.non_compliant_message }}
        {% endif %}
      </span>
    </div>
  {% endif %}
  
  <!-- Forbrukertilsynet Compliance Information -->
  <div class="forbrukertilsynet-notice">
    <div class="forbrukertilsynet-logo">
      <svg viewBox="0 0 24 24" width="16" height="16">
        <path fill="currentColor" d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.1 14.8,9.5V11C15.4,11 16,11.6 16,12.3V15.8C16,16.4 15.4,17 14.7,17H9.2C8.6,17 8,16.4 8,15.7V12.2C8,11.6 8.6,11 9.2,11V9.5C9.2,8.1 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,9.5V11H13.5V9.5C13.5,8.7 12.8,8.2 12,8.2Z"></path>
      </svg>
    </div>
    <span>This product pricing complies with Norwegian price regulations (Forbrukertilsynet)</span>
  </div>
</div>

{% schema %}
{
  "name": "Premium Price Compliance",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Display Settings"
    },
    {
      "type": "select",
      "id": "display_style",
      "label": "Display style",
      "options": [
        {
          "value": "minimal",
          "label": "Minimal (basic information only)"
        },
        {
          "value": "compact",
          "label": "Compact"
        },
        {
          "value": "detailed",
          "label": "Detailed"
        }
      ],
      "default": "detailed"
    },
    {
      "type": "checkbox",
      "id": "show_price_history",
      "label": "Show price history",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_compliance_status",
      "label": "Show compliance status",
      "default": true
    },
    {
      "type": "header",
      "content": "Visual Customization"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "sale_price_color",
      "label": "Sale price color",
      "default": "#D72C0D"
    },
    {
      "type": "color",
      "id": "reference_price_color", 
      "label": "Reference price color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#008060"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e5e5e5"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "select",
      "id": "border_style",
      "label": "Border style",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "solid",
          "label": "Solid"
        },
        {
          "value": "dashed",
          "label": "Dashed"
        },
        {
          "value": "dotted",
          "label": "Dotted"
        }
      ],
      "default": "solid"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Base font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "shadow_intensity",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Shadow intensity",
      "default": 3
    },
    {
      "type": "header",
      "content": "Text Customization (Norwegian Compliance)"
    },
    {
      "type": "text",
      "id": "discount_label",
      "label": "Discount label",
      "default": "Save {percent}%"
    },
          {
      "type": "text",
      "id": "reference_price_label",
      "label": "Reference price label",
      "default": "Lowest price in the last 30 days",
      "info": "Required by Norwegian price regulations (Forbrukertilsynet)"
    },
    {
      "type": "text",
      "id": "sale_period_label",
      "label": "Sale period label",
      "default": "Sale period"
    },
    {
      "type": "text",
      "id": "regular_price_label",
      "label": "Regular price label",
      "default": "Regular price"
    },
    {
      "type": "text",
      "id": "tracking_since_label",
      "label": "Price tracking since label",
      "default": "Price tracked since"
    },
    {
      "type": "text",
      "id": "price_history_label",
      "label": "Price history label",
      "default": "View price history"
    },
    {
      "type": "text",
      "id": "loading_label",
      "label": "Loading label",
      "default": "Loading price history..."
    },
    {
      "type": "text",
      "id": "compliant_message",
      "label": "Compliant status message",
      "default": "This product's pricing complies with Norwegian regulations"
    },
    {
      "type": "text",
      "id": "non_compliant_message",
      "label": "Non-compliant status message",
      "default": "Contact the store for more information about price history"
    }
  ]
}
{% endschema %}

<style>
/* Premium Norwegian Price Compliance Widget - Modern Redesign */
.premium-compliance-container {
  margin: 1.5rem 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.5;
  padding: 1.5rem;
  background-color: var(--background-color, #ffffff);
  color: var(--text-color, #333333);
  border: var(--border-width, 1px) var(--border-style, solid) var(--border-color, #e5e5e5);
  border-radius: var(--border-radius, 8px);
  font-size: var(--font-size, 14px);
  box-shadow: 0 calc(var(--shadow-intensity, 3) * 1px) calc(var(--shadow-intensity, 3) * 3px) rgba(0,0,0, calc(var(--shadow-intensity, 3) * 0.02));
  transition: all 0.3s ease;
  max-width: 100%;
  overflow: hidden;
}

/* General Layout Components */
.premium-compliance-pricing {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Price Section */
.price-section {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.current-price-section {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.current-price {
  font-size: calc(var(--font-size) * 1.7);
  font-weight: 700;
  color: var(--sale-price-color, #D72C0D);
  letter-spacing: -0.02em;
  line-height: 1.2;
}

.current-price.regular {
  color: var(--text-color, #333);
}

.discount-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: var(--sale-price-color, #D72C0D);
  color: white;
  padding: 0.35rem 0.75rem;
  border-radius: 4px;
  font-size: calc(var(--font-size) * 0.9);
  font-weight: 600;
  letter-spacing: 0.02em;
  box-shadow: 0 2px 4px rgba(215, 44, 13, 0.15);
  margin-top: 2px;
}

/* Regular Mode Display */
.regular-mode-section {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.regular-price-info {
  display: flex;
  align-items: baseline;
  gap: 1rem;
}

/* Tracking Info */
.tracking-info {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: calc(var(--font-size) * 0.9);
  color: var(--reference-price-color, #666);
  padding: 0.5rem;
  background-color: rgba(0, 0, 0, 0.02);
  border-radius: 6px;
  border-left: 3px solid var(--reference-price-color, #666);
}

.tracking-icon {
  display: flex;
  align-items: center;
  color: var(--reference-price-color, #666);
  opacity: 0.8;
}

.tracking-since {
  font-style: italic;
}

/* Reference Price (førpris) - Key for compliance */
.reference-price-section {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  background-color: rgba(0, 0, 0, 0.025);
  border-radius: 6px;
  border-left: 3px solid var(--reference-price-color, #666);
  transition: background-color 0.2s ease;
}

.reference-price-section:hover {
  background-color: rgba(0, 0, 0, 0.035);
}

.reference-price-content {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.reference-price {
  text-decoration: line-through;
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 1.15);
  font-weight: 500;
}

.reference-price-label {
  font-size: calc(var(--font-size) * 0.85);
  font-weight: 500;
  color: var(--reference-price-color, #666);
  opacity: 0.9;
}

.compliance-note {
  font-size: calc(var(--font-size) * 0.75);
  font-style: italic;
  color: var(--reference-price-color, #666);
  opacity: 0.8;
  margin-top: 0.25rem;
}

.reference-price-icon {
  color: var(--reference-price-color, #666);
  opacity: 0.7;
}

/* Regular price if shown */
.regular-price-section {
  font-size: calc(var(--font-size) * 0.9);
  color: var(--reference-price-color, #666);
  margin-top: 0.25rem;
  padding: 0.5rem 0.75rem;
  background-color: rgba(0, 0, 0, 0.02);
  border-radius: 4px;
  display: inline-block;
}

.regular-price-label {
  font-weight: 500;
  margin-right: 0.25rem;
}

/* Sale Period */
.sale-period-section {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: calc(var(--font-size) * 0.9);
  color: var(--reference-price-color, #666);
  padding: 0.5rem 0.75rem;
  background-color: rgba(0, 0, 0, 0.02);
  border-radius: 6px;
  max-width: fit-content;
}

.sale-period-icon {
  display: flex;
  align-items: center;
  color: var(--reference-price-color, #666);
  opacity: 0.8;
}

/* Price History Section */
.price-history-container {
  margin-top: 1.5rem;
  border-top: 1px solid rgba(0, 0, 0, 0.07);
  padding-top: 1.25rem;
}

.price-history-details {
  width: 100%;
}

.price-history-details summary {
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--accent-color, #008060);
  font-size: calc(var(--font-size) * 1);
  font-weight: 500;
  padding: 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s ease;
  user-select: none;
  outline: none;
}

.price-history-details summary:hover {
  background-color: rgba(0, 0, 0, 0.03);
}

.price-history-details summary::-webkit-details-marker {
  display: none;
}

.summary-icon {
  display: flex;
  align-items: center;
}

details[open] .summary-icon svg {
  transform: rotate(90deg);
}

.summary-icon svg {
  transition: transform 0.3s ease;
}

.price-history-graph {
  height: 200px;
  margin-top: 1.25rem;
  position: relative;
  background-color: rgba(0, 0, 0, 0.02);
  border-radius: 8px;
  padding: 1rem;
  overflow: hidden;
  transition: height 0.3s ease;
}

.price-history-placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  height: 100%;
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 0.9);
}

.loading-spinner {
  width: 24px;
  height: 24px;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-top-color: var(--accent-color, #008060);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Compliance Status Section */
.compliance-status {
  display: flex;
  align-items: center;
  padding: 0.85rem 1rem;
  margin-top: 1.5rem;
  border-radius: 6px;
  font-size: calc(var(--font-size) * 0.95);
  gap: 0.75rem;
  transition: transform 0.2s ease;
}

.compliance-status:hover {
  transform: translateY(-1px);
}

.compliance-status.compliant {
  background-color: rgba(0, 128, 96, 0.08);
  color: #008060;
  border-left: 3px solid #008060;
}

.compliance-status.non-compliant {
  background-color: rgba(215, 44, 13, 0.08);
  color: #D72C0D;
  border-left: 3px solid #D72C0D;
}

.compliance-icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.compliance-text {
  line-height: 1.4;
}

/* Forbrukertilsynet compliance notice */
.forbrukertilsynet-notice {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 1rem;
  padding: 0.6rem 0.75rem;
  background-color: rgba(0, 128, 96, 0.05);
  border-radius: 5px;
  font-size: calc(var(--font-size) * 0.8);
  color: var(--accent-color, #008060);
  border-left: 3px solid var(--accent-color, #008060);
}

.forbrukertilsynet-logo {
  display: flex;
  align-items: center;
  color: var(--accent-color, #008060);
}

@media (max-width: 640px) {
  .forbrukertilsynet-notice {
    font-size: calc(var(--font-size) * 0.75);
  }
}

/* Display Style Adjustments */
/* Minimal style */
[data-display-style="minimal"] .sale-period-section,
[data-display-style="minimal"] .regular-price-section,
[data-display-style="minimal"] .tracking-info {
  display: none;
}

[data-display-style="minimal"] .price-history-container {
  margin-top: 1rem;
  padding-top: 1rem;
}

[data-display-style="minimal"] .compliance-status {
  margin-top: 1rem;
  padding: 0.65rem 0.85rem;
}

/* Compact style */
[data-display-style="compact"] .premium-compliance-pricing {
  gap: 0.85rem;
}

[data-display-style="compact"] .price-section {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: 1rem;
  align-items: start;
}

[data-display-style="compact"] .reference-price-section {
  grid-row: 1;
  grid-column: 2;
}

[data-display-style="compact"] .current-price-section {
  grid-row: 1;
  grid-column: 1;
}

[data-display-style="compact"] .sale-period-section {
  grid-row: 2;
  grid-column: 1 / -1;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .premium-compliance-container {
    padding: 1.25rem;
    margin: 1rem 0;
  }
  
  .current-price {
    font-size: calc(var(--font-size) * 1.5);
  }
  
  [data-display-style="compact"] .price-section {
    display: flex;
    flex-direction: column;
  }
  
  .price-history-graph {
    height: 180px;
  }
}
</style>

<script>
/**
 * Norwegian Price Compliance Widget
 * 
 * Displays price history and compliance information according to Norwegian price regulations.
 * Features modern visualization, responsive design, and enhanced user experience.
 * Follows Forbrukertilsynet guidelines for price display and transparency.
 * 
 * @version 3.0.0
 * @copyright 2025
 */
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all compliance widgets on the page
  const complianceWidgets = document.querySelectorAll('.premium-compliance-container');
  
  complianceWidgets.forEach(widget => {
    const productId = widget.getAttribute('data-product-id');
    const variantId = widget.getAttribute('data-variant-id');
    
    if (!productId || !variantId) return;
    
    // Initialize details elements with smooth animations
    initializeDetailsElements(widget);
    
    // Ensure price history section exists
    ensurePriceHistoryExists(widget);
    
    // Fetch actual compliance data from API
    fetchComplianceData(widget, productId, variantId);
  });
  
  /**
   * Initializes all details elements with smooth animations and interactions
   */
  function initializeDetailsElements(widget) {
    const detailsElements = widget.querySelectorAll('details');
    
    detailsElements.forEach(details => {
      const content = details.querySelector('.price-history-graph');
      
      // Initialize height for animation
      if (!details.open && content) {
        content.style.height = '0px';
        content.style.opacity = '0';
        content.style.marginTop = '0px';
      }
      
      details.addEventListener('toggle', () => {
        if (details.open && content) {
          // Animate opening
          content.style.height = '0px';
          content.style.opacity = '0';
          content.style.marginTop = '0px';
          
          // Trigger animation after a small delay
          setTimeout(() => {
            content.style.height = '200px';
            content.style.opacity = '1';
            content.style.marginTop = '1.25rem';
          }, 10);
        } else if (content) {
          // Animate closing
          content.style.height = '0px';
          content.style.opacity = '0';
          content.style.marginTop = '0px';
        }
      });
    });
  }
  
  /**
   * Ensures the price history section exists in the widget
   * Creates it if missing based on widget settings
   */
  function ensurePriceHistoryExists(widget) {
    if (widget.querySelector('.price-history-container')) return;
    
    // Create price history container
    const historyContainer = document.createElement('div');
    historyContainer.className = 'price-history-container';
    
    // Create details element with summary
    const details = document.createElement('details');
    details.className = 'price-history-details';
    
    const summary = document.createElement('summary');
    
    const summaryIcon = document.createElement('span');
    summaryIcon.className = 'summary-icon';
    summaryIcon.innerHTML = `
      <svg viewBox="0 0 24 24" width="18" height="18">
        <path fill="currentColor" d="M16,6L18.29,8.29L13.41,13.17L9.41,9.17L2,16.59L3.41,18L9.41,12L13.41,16L19.71,9.71L22,12V6H16Z"></path>
      </svg>
    `;
    
    const summaryText = document.createElement('span');
    summaryText.className = 'summary-text';
    summaryText.textContent = 'View price history';
    
    summary.appendChild(summaryIcon);
    summary.appendChild(summaryText);
    
    // Create graph container
    const graph = document.createElement('div');
    graph.className = 'price-history-graph';
    
    // Add loading placeholder
    const placeholder = document.createElement('div');
    placeholder.className = 'price-history-placeholder';
    
    const spinner = document.createElement('div');
    spinner.className = 'loading-spinner';
    
    const loadingText = document.createElement('span');
    loadingText.textContent = 'Loading price history...';
    
    placeholder.appendChild(spinner);
    placeholder.appendChild(loadingText);
    graph.appendChild(placeholder);
    
    // Assemble the elements
    details.appendChild(summary);
    details.appendChild(graph);
    historyContainer.appendChild(details);
    widget.appendChild(historyContainer);
    
    // Render initial demo data
    const demoData = generatePriceHistoryData();
    renderPriceChart(graph, demoData);
    
    // Initialize animation
    initializeDetailsElements(widget);
  }
  
  /**
   * Generates demo price history data for initial display
   * Compliant with Norwegian price regulations
   * Simulates a 90-day price history with proper pricing pattern
   */
  function generatePriceHistoryData() {
    const data = [];
    const endDate = new Date();
    
    // Set up realistic price points
    const regularPrice = 1499;
    const salePrice = 999;
    
    // Following Norwegian regulations:
    // - Regular price must be used for a significant period before a sale
    // - The 30-day reference price is critical for compliance
    // - Sale periods should be limited in duration
    
    // Generate 90 days of price history with a compliant pattern
    for (let i = 90; i >= 0; i--) {
      const date = new Date(endDate);
      date.setDate(date.getDate() - i);
      const dateString = date.toISOString().split('T')[0];
      
      // Days 90-60: Regular price
      if (i >= 60) {
        data.push({
          date: dateString,
          price: regularPrice,
          compareAtPrice: null
        });
      }
      // Days 59-40: Short sale period
      else if (i >= 40) {
        data.push({
          date: dateString,
          price: Math.round(regularPrice * 0.9), // 10% off
          compareAtPrice: regularPrice
        });
      }
      // Days 39-31: Back to regular price (important for 30-day reference)
      else if (i >= 31) {
        data.push({
          date: dateString,
          price: regularPrice,
          compareAtPrice: null
        });
      }
      // Current sale period (last 30 days)
      else {
        data.push({
          date: dateString,
          price: salePrice,
          compareAtPrice: regularPrice
        });
      }
    }
    
    return data;
  }
  
  /**
   * Fetches compliance data from the API
   * Uses multiple URL formats for compatibility
   */
  function fetchComplianceData(widget, productId, variantId) {
    const shopDomain = window.Shopify ? window.Shopify.shop : window.location.hostname;
    
    // Define API URL formats to try
    const apiUrls = [
      `/apps/compliance/${productId}/${variantId}?shop=${shopDomain}`,
      `/apps/compliance/${variantId}?shop=${shopDomain}`,
      `/apps/compliance?productId=${productId}&variantId=${variantId}&shop=${shopDomain}`,
      `/api/compliance/${productId}/${variantId}?shop=${shopDomain}`
    ];
    
    // Try each URL format in succession
    tryFetchUrls(apiUrls, 0)
      .then(data => {
        if (!data.success) {
          throw new Error(data.error || 'Unknown error');
        }
        
        // Update compliance status
        updateComplianceStatus(widget, data);
        
        // Update price history if we received it
        if (data.priceHistory && data.priceHistory.length > 0) {
          const historyElement = widget.querySelector('.price-history-graph');
          if (historyElement) {
            renderPriceChart(historyElement, data.priceHistory);
          }
        }
      })
      .catch(error => {
        // Chart is already rendered with demo data, no further action needed
      });
  }
  
  /**
   * Tries each URL in succession until one succeeds
   */
  function tryFetchUrls(urls, index) {
    if (index >= urls.length) {
      return Promise.reject(new Error('All API URLs failed'));
    }
    
    return fetch(urls[index])
      .then(response => {
        if (!response.ok) {
          throw new Error(`API response not OK: ${response.status}`);
        }
        return response.json();
      })
      .catch(() => {
        // Try the next URL
        return tryFetchUrls(urls, index + 1);
      });
  }
  
  /**
   * Updates the compliance status display based on API response
   */
  function updateComplianceStatus(widget, data) {
    const statusElement = widget.querySelector('.compliance-status');
    if (!statusElement) return;
    
    // Update class
    if (data.isCompliant) {
      statusElement.classList.add('compliant');
      statusElement.classList.remove('non-compliant');
    } else {
      statusElement.classList.add('non-compliant');
      statusElement.classList.remove('compliant');
    }
    
    // Update text content if we have specific issues
    const textElement = statusElement.querySelector('.compliance-text');
    if (textElement && data.issues && data.issues.length > 0) {
      textElement.textContent = data.issues[0].message;
    }
  }
  
  /**
   * Renders the price history chart with premium styling
   * SVG-based visualization of price over time
   */
  function renderPriceChart(element, priceData) {
    // Clear the element
    element.innerHTML = '';
    
    if (!priceData || priceData.length === 0) {
      element.innerHTML = '<div class="price-history-placeholder">No price history available</div>';
      return;
    }
    
    try {
      // Set dimensions with more padding for a more polished look
      const width = element.clientWidth || 400;
      const height = 200; // Increased height for better visualization
      const padding = {
        top: 35,
        right: 25,
        bottom: 35,
        left: 45
      };
      
      // Calculate min and max values for scaling with better padding
      const prices = priceData.map(d => parseFloat(d.price)).filter(p => !isNaN(p));
      const comparePrices = priceData
        .filter(d => d.compareAtPrice)
        .map(d => parseFloat(d.compareAtPrice))
        .filter(p => !isNaN(p));
      
      const allPrices = [...prices, ...comparePrices];
      if (allPrices.length === 0) {
        throw new Error('No valid price data found');
      }
      
      // Add more padding to price range for better visualization
      const minPrice = Math.floor(Math.min(...allPrices) * 0.85);
      const maxPrice = Math.ceil(Math.max(...allPrices) * 1.15);
      const priceRange = maxPrice - minPrice;
      
      // Create SVG with enhanced styles
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('width', '100%');
      svg.setAttribute('height', '100%');
      svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
      svg.style.overflow = 'visible'; 
      element.appendChild(svg);
      
      // Create a cleaner background with rounded corners
      const background = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      background.setAttribute('x', 0);
      background.setAttribute('y', 0);
      background.setAttribute('width', width);
      background.setAttribute('height', height);
      background.setAttribute('rx', '6');
      background.setAttribute('fill', '#f9f9f9');
      svg.appendChild(background);
      
      // Helper functions for scaling with improved padding
      const scaleX = i => padding.left + ((width - padding.left - padding.right) * i / (priceData.length - 1));
      const scaleY = price => height - padding.bottom - ((height - padding.top - padding.bottom) * (price - minPrice) / priceRange);
      
      // Draw more subtle grid lines with better spacing
      const gridLineCount = 5;
      for (let i = 0; i < gridLineCount; i++) {
        const y = padding.top + (i * (height - padding.top - padding.bottom) / (gridLineCount - 1));
        const gridLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        gridLine.setAttribute('x1', padding.left);
        gridLine.setAttribute('y1', y);
        gridLine.setAttribute('x2', width - padding.right);
        gridLine.setAttribute('y2', y);
        gridLine.setAttribute('stroke', '#e5e5e5');
        gridLine.setAttribute('stroke-width', '1');
        svg.appendChild(gridLine);
        
        // Add price labels on Y axis with better positioning
        const priceValue = maxPrice - (i * priceRange / (gridLineCount - 1));
        const priceLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        priceLabel.setAttribute('x', padding.left - 10);
        priceLabel.setAttribute('y', y + 4); 
        priceLabel.setAttribute('text-anchor', 'end');
        priceLabel.setAttribute('font-size', '10');
        priceLabel.setAttribute('fill', '#777');
        priceLabel.textContent = priceValue.toFixed(0);
        svg.appendChild(priceLabel);
      }
      
      // Add Y-axis label
      const yAxisLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      yAxisLabel.setAttribute('x', 15);
      yAxisLabel.setAttribute('y', height / 2);
      yAxisLabel.setAttribute('font-size', '10');
      yAxisLabel.setAttribute('fill', '#555');
      yAxisLabel.setAttribute('text-anchor', 'middle');
      yAxisLabel.setAttribute('transform', `rotate(-90, 15, ${height / 2})`);
      yAxisLabel.textContent = 'Price';
      svg.appendChild(yAxisLabel);
      
      // Draw axes with cleaner style
      const xAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      xAxis.setAttribute('x1', padding.left);
      xAxis.setAttribute('y1', height - padding.bottom);
      xAxis.setAttribute('x2', width - padding.right);
      xAxis.setAttribute('y2', height - padding.bottom);
      xAxis.setAttribute('stroke', '#999');
      xAxis.setAttribute('stroke-width', '1');
      svg.appendChild(xAxis);
      
      const yAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      yAxis.setAttribute('x1', padding.left);
      yAxis.setAttribute('y1', padding.top);
      yAxis.setAttribute('x2', padding.left);
      yAxis.setAttribute('y2', height - padding.bottom);
      yAxis.setAttribute('stroke', '#999');
      yAxis.setAttribute('stroke-width', '1');
      svg.appendChild(yAxis);
      
      // Add improved date labels (evenly spaced)
      const dateLabels = [0, Math.floor(priceData.length / 4), Math.floor(priceData.length / 2), 
                        Math.floor(priceData.length * 3 / 4), priceData.length - 1];
                        
      dateLabels.forEach(index => {
        if (priceData[index]) {
          try {
            const date = new Date(priceData[index].date);
            const formattedDate = date.toLocaleDateString(undefined, {
              month: 'short',
              day: 'numeric'
            });
            
            const dateLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            dateLabel.setAttribute('x', scaleX(index));
            dateLabel.setAttribute('y', height - padding.bottom + 15);
            dateLabel.setAttribute('text-anchor', 'middle');
            dateLabel.setAttribute('font-size', '10');
            dateLabel.setAttribute('fill', '#777');
            dateLabel.textContent = formattedDate;
            svg.appendChild(dateLabel);
          } catch (e) {
            // Skip invalid dates
          }
        }
      });
      
      // Draw compare-at price line (dashed reference line) with improved styling
      if (comparePrices.length > 0) {
        // Get indices where compareAtPrice exists
        const indices = priceData
          .map((p, i) => p.compareAtPrice ? i : -1)
          .filter(i => i !== -1);
        
        if (indices.length > 0) {
          // Create the polyline for the compare-at prices
          const comparePolyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
          const points = indices.map(i => {
            const price = parseFloat(priceData[i].compareAtPrice);
            return `${scaleX(i)},${scaleY(price)}`;
          }).join(' ');
          
          comparePolyline.setAttribute('points', points);
          comparePolyline.setAttribute('fill', 'none');
          comparePolyline.setAttribute('stroke', '#666');
          comparePolyline.setAttribute('stroke-width', '2');
          comparePolyline.setAttribute('stroke-dasharray', '4,4');
          svg.appendChild(comparePolyline);
        }
      }
      
      // Add a subtle area under the price line
      const priceArea = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      const areaPoints = priceData.map((d, i) => {
        const price = parseFloat(d.price);
        return `${scaleX(i)},${scaleY(price)}`;
      }).join(' ');
      
      // Add points at the bottom to close the area
      const areaPath = `M${padding.left},${height - padding.bottom} ` + 
                       `L${priceData.map((d, i) => `${scaleX(i)},${scaleY(parseFloat(d.price))}`).join(' ')} ` +
                       `L${width - padding.right},${height - padding.bottom} Z`;
                       
      priceArea.setAttribute('d', areaPath);
      priceArea.setAttribute('fill', 'url(#price-gradient)');
      priceArea.setAttribute('opacity', '0.2');
      
      // Add gradient definition
      const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
      svg.appendChild(defs);
      
      const gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
      gradient.setAttribute('id', 'price-gradient');
      gradient.setAttribute('x1', '0%');
      gradient.setAttribute('y1', '0%');
      gradient.setAttribute('x2', '0%');
      gradient.setAttribute('y2', '100%');
      
      const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
      stop1.setAttribute('offset', '0%');
      stop1.setAttribute('stop-color', '#008060');
      
      const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
      stop2.setAttribute('offset', '100%');
      stop2.setAttribute('stop-color', '#008060');
      stop2.setAttribute('stop-opacity', '0');
      
      gradient.appendChild(stop1);
      gradient.appendChild(stop2);
      defs.appendChild(gradient);
      
      svg.appendChild(priceArea);
      
      // Draw regular price line (solid line) with improved styling
      const priceLine = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
      const points = priceData.map((d, i) => {
        const price = parseFloat(d.price);
        return `${scaleX(i)},${scaleY(price)}`;
      }).join(' ');
      
      priceLine.setAttribute('points', points);
      priceLine.setAttribute('fill', 'none');
      priceLine.setAttribute('stroke', '#008060');
      priceLine.setAttribute('stroke-width', '2.5');
      priceLine.setAttribute('stroke-linecap', 'round');
      priceLine.setAttribute('stroke-linejoin', 'round');
      svg.appendChild(priceLine);
      
      // Add price markers with better spacing and hover effects
      const markerCount = 5;
      const markerIndices = [];
      for (let i = 0; i < markerCount; i++) {
        markerIndices.push(Math.floor(i * (priceData.length - 1) / (markerCount - 1)));
      }
      
      // Create a group for markers to apply interactions
      const markersGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      markersGroup.setAttribute('class', 'price-markers');
      svg.appendChild(markersGroup);
      
      markerIndices.forEach(i => {
        const price = parseFloat(priceData[i].price);
        
        // Create marker group for each point
        const markerGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        markerGroup.setAttribute('class', 'marker-group');
        markersGroup.appendChild(markerGroup);
        
        // Larger hidden circle for better hover area
        const hoverArea = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        hoverArea.setAttribute('cx', scaleX(i));
        hoverArea.setAttribute('cy', scaleY(price));
        hoverArea.setAttribute('r', '12');
        hoverArea.setAttribute('fill', 'transparent');
        markerGroup.appendChild(hoverArea);
        
        // Actual visible marker
        const marker = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        marker.setAttribute('cx', scaleX(i));
        marker.setAttribute('cy', scaleY(price));
        marker.setAttribute('r', '4');
        marker.setAttribute('fill', '#008060');
        marker.setAttribute('stroke', 'white');
        marker.setAttribute('stroke-width', '1.5');
        markerGroup.appendChild(marker);
        
        // Create tooltip elements (initially hidden)
        const tooltip = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        tooltip.setAttribute('opacity', '0');
        tooltip.setAttribute('transform', `translate(${scaleX(i)}, ${scaleY(price) - 25})`);
        markerGroup.appendChild(tooltip);
        
        // Tooltip background
        const tooltipBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        tooltipBg.setAttribute('x', -40);
        tooltipBg.setAttribute('y', -20);
        tooltipBg.setAttribute('width', '80');
        tooltipBg.setAttribute('height', '25');
        tooltipBg.setAttribute('rx', '4');
        tooltipBg.setAttribute('fill', 'rgba(50, 50, 50, 0.85)');
        tooltip.appendChild(tooltipBg);
        
        // Tooltip pointer
        const tooltipPointer = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        tooltipPointer.setAttribute('d', 'M-6,-0 L6,-0 L0,6 Z');
        tooltipPointer.setAttribute('fill', 'rgba(50, 50, 50, 0.85)');
        tooltip.appendChild(tooltipPointer);
        
        // Tooltip price text
        const tooltipText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        tooltipText.setAttribute('x', '0');
        tooltipText.setAttribute('y', '-5');
        tooltipText.setAttribute('text-anchor', 'middle');
        tooltipText.setAttribute('font-size', '11');
        tooltipText.setAttribute('fill', 'white');
        tooltipText.textContent = priceData[i].price.toFixed(2);
        tooltip.appendChild(tooltipText);
        
        // Add hover interactions
        hoverArea.addEventListener('mouseenter', () => {
          marker.setAttribute('r', '6');
          tooltip.setAttribute('opacity', '1');
        });
        
        hoverArea.addEventListener('mouseleave', () => {
          marker.setAttribute('r', '4');
          tooltip.setAttribute('opacity', '0');
        });
      });
      
      // Mark the start of sale period with improved visual
      const saleStartIndex = priceData.findIndex(p => p.compareAtPrice !== null);
      if (saleStartIndex > 0) {
        // Add a gradient zone to highlight sale period
        const saleZone = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        saleZone.setAttribute('x', scaleX(saleStartIndex));
        saleZone.setAttribute('y', padding.top);
        saleZone.setAttribute('width', width - padding.right - scaleX(saleStartIndex));
        saleZone.setAttribute('height', height - padding.top - padding.bottom);
        saleZone.setAttribute('fill', 'url(#sale-gradient)');
        
        // Define sale period gradient
        const saleGradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
        saleGradient.setAttribute('id', 'sale-gradient');
        saleGradient.setAttribute('x1', '0%');
        saleGradient.setAttribute('y1', '0%');
        saleGradient.setAttribute('x2', '100%');
        saleGradient.setAttribute('y2', '0%');
        
        const saleStop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        saleStop1.setAttribute('offset', '0%');
        saleStop1.setAttribute('stop-color', '#D72C0D');
        saleStop1.setAttribute('stop-opacity', '0.08');
        
        const saleStop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        saleStop2.setAttribute('offset', '100%');
        saleStop2.setAttribute('stop-color', '#D72C0D');
        saleStop2.setAttribute('stop-opacity', '0.02');
        
        saleGradient.appendChild(saleStop1);
        saleGradient.appendChild(saleStop2);
        defs.appendChild(saleGradient);
        
        // Insert sale zone before the price line
        svg.insertBefore(saleZone, priceLine);
        
        // Create a visually distinct vertical line
        const saleStartLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        saleStartLine.setAttribute('x1', scaleX(saleStartIndex));
        saleStartLine.setAttribute('y1', padding.top);
        saleStartLine.setAttribute('x2', scaleX(saleStartIndex));
        saleStartLine.setAttribute('y2', height - padding.bottom);
        saleStartLine.setAttribute('stroke', '#D72C0D');
        saleStartLine.setAttribute('stroke-width', '1.5');
        saleStartLine.setAttribute('stroke-dasharray', '4,4');
        svg.appendChild(saleStartLine);
        
        // Add a more visible sale start label with fancy styling
        const labelBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        labelBg.setAttribute('x', scaleX(saleStartIndex) - 35);
        labelBg.setAttribute('y', padding.top - 22);
        labelBg.setAttribute('width', '70');
        labelBg.setAttribute('height', '18');
        labelBg.setAttribute('rx', '9');
        labelBg.setAttribute('fill', '#D72C0D');
        labelBg.setAttribute('fill-opacity', '0.1');
        labelBg.setAttribute('stroke', '#D72C0D');
        labelBg.setAttribute('stroke-width', '1');
        labelBg.setAttribute('stroke-opacity', '0.4');
        svg.appendChild(labelBg);
        
        const saleLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        saleLabel.setAttribute('x', scaleX(saleStartIndex));
        saleLabel.setAttribute('y', padding.top - 9);
        saleLabel.setAttribute('text-anchor', 'middle');
        saleLabel.setAttribute('font-size', '10');
        saleLabel.setAttribute('fill', '#D72C0D');
        saleLabel.setAttribute('font-weight', 'bold');
        saleLabel.textContent = 'Sale Started';
        svg.appendChild(saleLabel);
      }
      
      // Add enhanced legend with improved styling
      const legendX = 15;
      const legendY = 15;
      const legendWidth = 160;
      const legendHeight = 50;
      
      // Create legend background with shadow effect
      const legendBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      legendBg.setAttribute('x', legendX);
      legendBg.setAttribute('y', legendY);
      legendBg.setAttribute('width', legendWidth);
      legendBg.setAttribute('height', legendHeight);
      legendBg.setAttribute('rx', '6');
      legendBg.setAttribute('fill', 'white');
      legendBg.setAttribute('stroke', '#eee');
      legendBg.setAttribute('stroke-width', '1');
      legendBg.setAttribute('filter', 'url(#legend-shadow)');
      
      // Add shadow filter
      const filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
      filter.setAttribute('id', 'legend-shadow');
      filter.setAttribute('x', '-20%');
      filter.setAttribute('y', '-20%');
      filter.setAttribute('width', '140%');
      filter.setAttribute('height', '140%');
      
      const feDropShadow = document.createElementNS('http://www.w3.org/2000/svg', 'feDropShadow');
      feDropShadow.setAttribute('dx', '0');
      feDropShadow.setAttribute('dy', '2');
      feDropShadow.setAttribute('stdDeviation', '3');
      feDropShadow.setAttribute('flood-color', 'rgba(0,0,0,0.1)');
      filter.appendChild(feDropShadow);
      defs.appendChild(filter);
      
      svg.appendChild(legendBg);
      
      // Current price line in legend with dot
      const priceLineLegend = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      priceLineLegend.setAttribute('x1', legendX + 15);
      priceLineLegend.setAttribute('y1', legendY + 20);
      priceLineLegend.setAttribute('x2', legendX + 35);
      priceLineLegend.setAttribute('y2', legendY + 20);
      priceLineLegend.setAttribute('stroke', '#008060');
      priceLineLegend.setAttribute('stroke-width', '2.5');
      priceLineLegend.setAttribute('stroke-linecap', 'round');
      svg.appendChild(priceLineLegend);
      
      const priceDotLegend = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      priceDotLegend.setAttribute('cx', legendX + 25);
      priceDotLegend.setAttribute('cy', legendY + 20);
      priceDotLegend.setAttribute('r', '3');
      priceDotLegend.setAttribute('fill', '#008060');
      priceDotLegend.setAttribute('stroke', 'white');
      priceDotLegend.setAttribute('stroke-width', '1');
      svg.appendChild(priceDotLegend);
      
      const priceText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      priceText.setAttribute('x', legendX + 45);
      priceText.setAttribute('y', legendY + 23);
      priceText.setAttribute('font-size', '11');
      priceText.setAttribute('fill', '#333');
      priceText.textContent = 'Current Price';
      svg.appendChild(priceText);
      
      // Reference price line in legend
      const refLineLegend = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      refLineLegend.setAttribute('x1', legendX + 15);
      refLineLegend.setAttribute('y1', legendY + 38);
      refLineLegend.setAttribute('x2', legendX + 35);
      refLineLegend.setAttribute('y2', legendY + 38);
      refLineLegend.setAttribute('stroke', '#666');
      refLineLegend.setAttribute('stroke-width', '2');
      refLineLegend.setAttribute('stroke-dasharray', '4,4');
      svg.appendChild(refLineLegend);
      
      const refText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      refText.setAttribute('x', legendX + 45);
      refText.setAttribute('y', legendY + 41);
      refText.setAttribute('font-size', '11');
      refText.setAttribute('fill', '#333');
      refText.textContent = 'Reference Price';
      svg.appendChild(refText);
      
      // Add date range label with improved styling
      if (priceData.length > 0) {
        // Format start and end dates
        let startDate, endDate;
        try {
          startDate = new Date(priceData[0].date);
          endDate = new Date(priceData[priceData.length - 1].date);
        } catch (e) {
          const today = new Date();
          endDate = today;
          startDate = new Date(today);
          startDate.setDate(startDate.getDate() - 90);
        }
        
        // Format dates to locale format
        const formatDate = (date) => {
          return date.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        };
        
        // Add date range text below chart with better styling
        const dateRangeDiv = document.createElement('div');
        dateRangeDiv.style.fontSize = '11px';
        dateRangeDiv.style.color = '#666';
        dateRangeDiv.style.textAlign = 'center';
        dateRangeDiv.style.marginTop = '12px';
        dateRangeDiv.style.padding = '6px 10px';
        dateRangeDiv.style.backgroundColor = 'rgba(0,0,0,0.03)';
        dateRangeDiv.style.borderRadius = '4px';
        dateRangeDiv.style.fontWeight = '500';
        dateRangeDiv.textContent = `Price history from ${formatDate(startDate)} to ${formatDate(endDate)}`;
        element.appendChild(dateRangeDiv);
      }
      
    } catch (error) {
      // Handle errors gracefully
      element.innerHTML = '<div class="price-history-placeholder">Unable to render price history chart</div>';
    }
  }
});
</script>