{% comment %}
  @name Elegant Price Analysis Widget
  @description Modern, clean display of price information with advanced history graph
  @icon price-lookup
  @category products
{% endcomment %}

<div class="elegant-price-widget" 
     data-product-id="{{ product.id }}" 
     data-variant-id="{{ product.selected_or_first_available_variant.id }}"
     data-display-style="{{ block.settings.display_style }}"
     style="
        --background-color: {{ block.settings.background_color }};
        --text-color: {{ block.settings.text_color }};
        --sale-price-color: {{ block.settings.sale_price_color }};
        --reference-price-color: {{ block.settings.reference_price_color }};
        --accent-color: {{ block.settings.accent_color }};
        --border-color: {{ block.settings.border_color }};
        --border-width: {{ block.settings.border_width }}px;
        --border-style: {{ block.settings.border_style }};
        --border-radius: {{ block.settings.border_radius }}px;
        --font-size: {{ block.settings.font_size }}px;
        --shadow-intensity: {{ block.settings.shadow_intensity }};
     ">
  
  <div class="price-main-content">
    {% if product.compare_at_price > product.price %}
      <!-- Sale Price Display -->
      <div class="price-section">
        <div class="current-price-section">
          <span class="current-price">{{ product.price | money }}</span>
          {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round %}
          {% assign discount_text = block.settings.discount_label | replace: "{percent}", discount_percentage %}
          <span class="discount-badge">{{ discount_text }}</span>
        </div>
        
        <!-- Reference Price -->
        <div class="reference-price-section">
          <span class="reference-price">{{ product.compare_at_price | money }}</span>
          <span class="reference-price-label">{{ block.settings.reference_price_label }}</span>
        </div>
      </div>
      
      <!-- Sale Period Information -->
      {% if product.metafields.compliance.sale_start_date %}
        <div class="sale-period-section">
          <span class="sale-period">{{ block.settings.sale_period_label }}: 
            {{ product.metafields.compliance.sale_start_date | date: "%d.%m.%Y" }} 
            {% if product.metafields.compliance.sale_end_date %} 
              - {{ product.metafields.compliance.sale_end_date | date: "%d.%m.%Y" }}
            {% endif %}
          </span>
        </div>
      {% endif %}
      
    {% else %}
      <!-- Regular price display -->
      <div class="regular-mode-section">
        <div class="regular-price-info">
          <span class="current-price regular">{{ product.price | money }}</span>
          <span class="regular-price-label">{{ block.settings.regular_price_label }}</span>
        </div>
      </div>
    {% endif %}
  </div>
  
  {% if block.settings.show_price_history %}
    <div class="price-history-container">
      <button type="button" class="price-history-toggle" aria-expanded="false" aria-controls="price-history-panel">
        <span class="toggle-text">{{ block.settings.price_history_label }}</span>
        <span class="toggle-icon">
          <svg viewBox="0 0 24 24" width="18" height="18">
            <path fill="currentColor" d="M7 10l5 5 5-5z"></path>
          </svg>
        </span>
      </button>
      
      <div id="price-history-panel" class="price-history-graph-container">
        <div class="price-history-graph" data-history="{{ product.metafields.compliance.price_history | json }}">
          <div class="price-history-placeholder">
            <div class="loading-spinner"></div>
            <span>{{ block.settings.loading_label }}</span>
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</div>

{% schema %}
{
  "name": "Elegant Price Widget",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Visningsinnstillinger"
    },
    {
      "type": "select",
      "id": "display_style",
      "label": "Visningsstil",
      "options": [
        {
          "value": "minimal",
          "label": "Minimal (kun basisinformasjon)"
        },
        {
          "value": "compact",
          "label": "Kompakt"
        },
        {
          "value": "detailed",
          "label": "Detaljert"
        }
      ],
      "default": "compact"
    },
    {
      "type": "checkbox",
      "id": "show_price_history",
      "label": "Vis prishistorikk",
      "default": true
    },
    {
      "type": "header",
      "content": "Visuell tilpasning"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Bakgrunnsfarge",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Tekstfarge",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "sale_price_color",
      "label": "Tilbudsprisfarge",
      "default": "#D72C0D"
    },
    {
      "type": "color",
      "id": "reference_price_color", 
      "label": "Referanseprisfarge",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Aksentfarge",
      "default": "#0066CC"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Kantfarge",
      "default": "#e5e5e5"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Kantbredde",
      "default": 1
    },
    {
      "type": "select",
      "id": "border_style",
      "label": "Kantstil",
      "options": [
        {
          "value": "none",
          "label": "Ingen"
        },
        {
          "value": "solid",
          "label": "Solid"
        },
        {
          "value": "dashed",
          "label": "Stiplet"
        },
        {
          "value": "dotted",
          "label": "Prikket"
        }
      ],
      "default": "solid"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Kantradius",
      "default": 8
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Grunnfontstørrelse",
      "default": 14
    },
    {
      "type": "range",
      "id": "shadow_intensity",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Skyggeintensitet",
      "default": 3
    },
    {
      "type": "header",
      "content": "Teksttilpasning"
    },
    {
      "type": "text",
      "id": "discount_label",
      "label": "Rabattetikett",
      "default": "Spar {percent}%"
    },
    {
      "type": "text",
      "id": "reference_price_label",
      "label": "Referanseprisetikett",
      "default": "Laveste pris siste 30 dager"
    },
    {
      "type": "text",
      "id": "sale_period_label",
      "label": "Salgsperiodeetikett",
      "default": "Salgsperiode"
    },
    {
      "type": "text",
      "id": "regular_price_label",
      "label": "Ordinær prisetikett",
      "default": "Ordinær pris"
    },
    {
      "type": "text",
      "id": "price_history_label",
      "label": "Prishistorikketikett",
      "default": "Vis prishistorikk"
    },
    {
      "type": "text",
      "id": "loading_label",
      "label": "Lasteetikett",
      "default": "Laster prishistorikk..."
    }
  ]
}
{% endschema %}

<style>
/* Elegant Price Widget - Clean Modern Design */
.elegant-price-widget {
  margin: 1.5rem 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.5;
  padding: 1.25rem;
  background-color: var(--background-color, #ffffff);
  color: var(--text-color, #333333);
  border: var(--border-width, 1px) var(--border-style, solid) var(--border-color, #e5e5e5);
  border-radius: var(--border-radius, 8px);
  font-size: var(--font-size, 14px);
  box-shadow: 0 calc(var(--shadow-intensity, 3) * 1px) calc(var(--shadow-intensity, 3) * 3px) rgba(0,0,0, calc(var(--shadow-intensity, 3) * 0.02));
  transition: all 0.3s ease;
  max-width: 100%;
  overflow: hidden;
}

/* Main Price Content */
.price-main-content {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

/* Price Section */
.price-section {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.current-price-section {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.current-price {
  font-size: calc(var(--font-size) * 1.6);
  font-weight: 600;
  color: var(--sale-price-color, #D72C0D);
  letter-spacing: -0.01em;
  line-height: 1.2;
}

.current-price.regular {
  color: var(--text-color, #333);
}

.discount-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: var(--sale-price-color, #D72C0D);
  color: white;
  padding: 0.25rem 0.6rem;
  border-radius: 3px;
  font-size: calc(var(--font-size) * 0.85);
  font-weight: 500;
  letter-spacing: 0.01em;
}

/* Reference Price */
.reference-price-section {
  display: flex;
  align-items: baseline;
  flex-wrap: wrap;
  gap: 0.5rem;
  font-size: calc(var(--font-size) * 0.9);
}

.reference-price {
  text-decoration: line-through;
  color: var(--reference-price-color, #666);
}

.reference-price-label {
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 0.85);
}

/* Regular Mode Display */
.regular-mode-section {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.regular-price-info {
  display: flex;
  align-items: baseline;
  gap: 0.75rem;
}

.regular-price-label {
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 0.9);
}

/* Sale Period */
.sale-period-section {
  font-size: calc(var(--font-size) * 0.9);
  color: var(--reference-price-color, #666);
  margin-top: 0.25rem;
}

/* Price History Section */
.price-history-container {
  margin-top: 1rem;
  border-top: 1px solid rgba(0, 0, 0, 0.08);
  padding-top: 1rem;
}

/* Modern Toggle Button - Improved Design */
.price-history-toggle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0.7rem 1rem;
  background-color: #f5f7fa;
  border: 1px solid rgba(0, 0, 0, 0.08);
  border-radius: 6px;
  color: var(--accent-color, #0066CC);
  font-size: calc(var(--font-size) * 0.95);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;
  outline: none;
}

.price-history-toggle:hover {
  background-color: #edf1f7;
}

.price-history-toggle:focus {
  box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
}

.toggle-icon {
  display: flex;
  align-items: center;
  transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.price-history-toggle[aria-expanded="true"] {
  background-color: #edf1f7;
  border-color: var(--accent-color, #0066CC);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.price-history-toggle[aria-expanded="true"] .toggle-icon {
  transform: rotate(180deg);
}

/* Graph Container - Improved */
.price-history-graph-container {
  display: none;
  height: 0;
  overflow: hidden;
  background-color: #f5f7fa;
  border: 1px solid rgba(0, 0, 0, 0.08);
  border-top: none;
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  margin-top: -1px;
}

.price-history-toggle[aria-expanded="true"] + .price-history-graph-container {
  display: block;
  height: 350px;
  padding: 1.25rem;
}

.price-history-graph {
  height: 100%;
  width: 100%;
  position: relative;
  border-radius: 4px;
  overflow: hidden;
}

.price-history-placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  height: 100%;
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 0.9);
}

.loading-spinner {
  width: 28px;
  height: 28px;
  border: 2px solid rgba(0, 102, 204, 0.1);
  border-top-color: var(--accent-color, #0066CC);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .elegant-price-widget {
    padding: 1rem;
    margin: 1rem 0;
  }
  
  .current-price {
    font-size: calc(var(--font-size) * 1.4);
  }
  
  .price-history-toggle[aria-expanded="true"] + .price-history-graph-container {
    height: 300px;
  }
}
</style>

<script>
/**
 * Elegant Price Widget
 * 
 * A modern, clean widget displaying product pricing and historical data
 * 
 * @version 2.0
 */
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all widgets on the page
  const priceWidgets = document.querySelectorAll('.elegant-price-widget');
  
  priceWidgets.forEach(widget => {
    const productId = widget.getAttribute('data-product-id');
    const variantId = widget.getAttribute('data-variant-id');
    
    if (!productId || !variantId) return;
    
    // Initialize toggle buttons
    initializeToggleButtons(widget);
    
    // Fetch price data from API
    fetchPriceData(widget, productId, variantId);
  });
  
  /**
   * Initializes toggle buttons for the price history panel
   */
  function initializeToggleButtons(widget) {
    const toggleButton = widget.querySelector('.price-history-toggle');
    const historyPanel = widget.querySelector('.price-history-graph-container');
    
    if (!toggleButton || !historyPanel) return;
    
    toggleButton.addEventListener('click', () => {
      const expanded = toggleButton.getAttribute('aria-expanded') === 'true';
      toggleButton.setAttribute('aria-expanded', !expanded);
      
      if (!expanded) {
        // If we're expanding, make sure the graph renders properly
        const graphElement = historyPanel.querySelector('.price-history-graph');
        if (graphElement) {
          const historyData = graphElement.getAttribute('data-rendered') !== 'true' ? 
            generatePriceHistoryData() : null;
            
          if (historyData) {
            setTimeout(() => {
              renderPriceChart(graphElement, historyData);
              graphElement.setAttribute('data-rendered', 'true');
            }, 100);
          }
        }
      }
    });
  }
  
  /**
   * Fetches price data from the API
   */
  function fetchPriceData(widget, productId, variantId) {
    const shopDomain = window.Shopify ? window.Shopify.shop : window.location.hostname;
    
    // Define API URL formats to try
    const apiUrls = [
      `/apps/compliance/${productId}/${variantId}?shop=${shopDomain}`,
      `/apps/compliance/${variantId}?shop=${shopDomain}`,
      `/apps/compliance?productId=${productId}&variantId=${variantId}&shop=${shopDomain}`,
      `/api/compliance/${productId}/${variantId}?shop=${shopDomain}`
    ];
    
    // Try each URL format in succession
    tryFetchUrls(apiUrls, 0)
      .then(data => {
        if (!data.success) {
          throw new Error(data.error || 'Ukjent feil');
        }
        
        // Update price history if we received it
        if (data.priceHistory && data.priceHistory.length > 0) {
          const historyElement = widget.querySelector('.price-history-graph');
          if (historyElement) {
            // Store the data but don't render until the panel is opened
            historyElement.setAttribute('data-history-json', JSON.stringify(data.priceHistory));
          }
        }
      })
      .catch(error => {
        // We'll use demo data when the panel is opened
        console.log('Using demo data for chart');
      });
  }
  
  /**
   * Tries each URL in succession until one succeeds
   */
  function tryFetchUrls(urls, index) {
    if (index >= urls.length) {
      return Promise.reject(new Error('Alle API-URLer mislyktes'));
    }
    
    return fetch(urls[index])
      .then(response => {
        if (!response.ok) {
          throw new Error(`API-respons ikke OK: ${response.status}`);
        }
        return response.json();
      })
      .catch(() => {
        // Try the next URL
        return tryFetchUrls(urls, index + 1);
      });
  }
  
  /**
   * Generates demo price history data for initial display
   */
  function generatePriceHistoryData() {
    const data = [];
    const endDate = new Date();
    
    // Set up realistic price points
    const regularPrice = 1499;
    const salePrice = 999;
    
    // Generate 90 days of price history
    for (let i = 90; i >= 0; i--) {
      const date = new Date(endDate);
      date.setDate(date.getDate() - i);
      const dateString = date.toISOString().split('T')[0];
      
      // Days 90-60: Regular price
      if (i >= 60) {
        data.push({
          date: dateString,
          price: regularPrice,
          compareAtPrice: null
        });
      }
      // Days 59-40: Short sale period
      else if (i >= 40) {
        data.push({
          date: dateString,
          price: Math.round(regularPrice * 0.9), // 10% off
          compareAtPrice: regularPrice
        });
      }
      // Days 39-31: Back to regular price
      else if (i >= 31) {
        data.push({
          date: dateString,
          price: regularPrice,
          compareAtPrice: null
        });
      }
      // Current sale period (last 30 days)
      else {
        data.push({
          date: dateString,
          price: salePrice,
          compareAtPrice: regularPrice
        });
      }
    }
    
    return data;
  }
  
  /**
   * Renders an improved professional price chart
   */
  function renderPriceChart(element, priceData) {
    // Try to get stored data first
    if (!priceData) {
      try {
        const storedData = element.getAttribute('data-history-json');
        if (storedData) {
          priceData = JSON.parse(storedData);
        }
      } catch (e) {
        console.error('Error parsing stored data', e);
      }
    }
    
    // If we still don't have data, generate demo data
    if (!priceData || !Array.isArray(priceData) || priceData.length === 0) {
      priceData = generatePriceHistoryData();
    }
    
    // Clear the element
    element.innerHTML = '';
    
    // Create chart container
    const chartContainer = document.createElement('div');
    chartContainer.className = 'price-chart-container';
    chartContainer.style.width = '100%';
    chartContainer.style.height = '100%';
    chartContainer.style.position = 'relative';
    element.appendChild(chartContainer);
    
    try {
      // Set dimensions for the chart
      const width = chartContainer.clientWidth || 500;
      const height = chartContainer.clientHeight || 300;
      
      // Create canvas for the chart instead of SVG for better performance
      const canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      canvas.style.width = '100%';
      canvas.style.height = '100%';
      chartContainer.appendChild(canvas);
      
      // Get the 2D context for drawing
      const ctx = canvas.getContext('2d');
      if (!ctx) {
        throw new Error('Kunne ikke få canvas-kontekst');
      }
      
      // Extract price data
      const dates = priceData.map(d => {
        try {
          return new Date(d.date);
        } catch (e) {
          return null;
        }
      }).filter(d => d !== null);
      
      const prices = priceData.map(d => parseFloat(d.price)).filter(p => !isNaN(p));
      
      const comparePrices = priceData
        .map((item, index) => {
          if (item.compareAtPrice) {
            return { 
              index,
              price: parseFloat(item.compareAtPrice) 
            };
          }
          return null;
        })
        .filter(item => item !== null && !isNaN(item.price));
      
      // Calculate min and max values for the Y axis
      const allPrices = [...prices, ...comparePrices.map(p => p.price)];
      const minPrice = Math.floor(Math.min(...allPrices) * 0.85);
      const maxPrice = Math.ceil(Math.max(...allPrices) * 1.15);
      
      // Calculate padding and drawable area
      const padding = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 70
      };
      
      const drawableWidth = width - padding.left - padding.right;
      const drawableHeight = height - padding.top - padding.bottom;
      
      // Helper functions to convert data to coordinates
      const getX = (index) => padding.left + (drawableWidth * index / (prices.length - 1));
      const getY = (price) => padding.top + drawableHeight - (drawableHeight * (price - minPrice) / (maxPrice - minPrice));
      
      // Draw background
      ctx.fillStyle = '#f5f7fa';
      ctx.fillRect(0, 0, width, height);
      
      // Draw grid lines
      ctx.strokeStyle = '#e0e0e0';
      ctx.lineWidth = 1;
      
      // Draw horizontal grid lines
      const horizontalLineCount = 5;
      for (let i = 0; i < horizontalLineCount; i++) {
        const y = padding.top + (i * drawableHeight / (horizontalLineCount - 1));
        
        ctx.beginPath();
        ctx.moveTo(padding.left, y);
        ctx.lineTo(width - padding.right, y);
        ctx.stroke();
        
        // Draw price labels
        const price = maxPrice - (i * (maxPrice - minPrice) / (horizontalLineCount - 1));
        ctx.fillStyle = '#666';
        ctx.font = '11px sans-serif';
        ctx.textAlign = 'right';
        ctx.textBaseline = 'middle';
        ctx.fillText(price.toFixed(0), padding.left - 10, y);
      }
      
      // Draw vertical grid lines and date labels
      const verticalLineCount = Math.min(6, prices.length);
      for (let i = 0; i < verticalLineCount; i++) {
        const index = Math.floor(i * (prices.length - 1) / (verticalLineCount - 1));
        const x = getX(index);
        
        // Draw vertical grid line
        ctx.beginPath();
        ctx.moveTo(x, padding.top);
        ctx.lineTo(x, height - padding.bottom);
        ctx.stroke();
        
        // Draw date label
        if (dates[index]) {
          const formattedDate = dates[index].toLocaleDateString('nb-NO', {
            month: 'short',
            day: 'numeric'
          });
          
          ctx.fillStyle = '#666';
          ctx.font = '11px sans-serif';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'top';
          ctx.fillText(formattedDate, x, height - padding.bottom + 10);
        }
      }
      
      // Draw axes
      ctx.strokeStyle = '#666';
      ctx.lineWidth = 1;
      
      // X axis
      ctx.beginPath();
      ctx.moveTo(padding.left, height - padding.bottom);
      ctx.lineTo(width - padding.right, height - padding.bottom);
      ctx.stroke();
      
      // Y axis
      ctx.beginPath();
      ctx.moveTo(padding.left, padding.top);
      ctx.lineTo(padding.left, height - padding.bottom);
      ctx.stroke();
      
      // Draw axis labels
      ctx.fillStyle = '#666';
      ctx.font = '12px sans-serif';
      
      // X axis label
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      ctx.fillText('Dato', width / 2, height - 15);
      
      // Y axis label
      ctx.save();
      ctx.translate(20, height / 2);
      ctx.rotate(-Math.PI / 2);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText('Pris (kr)', 0, 0);
      ctx.restore();
      
      // Draw reference price line if it exists
      if (comparePrices.length > 0) {
        ctx.strokeStyle = '#888';
        ctx.lineWidth = 1.5;
        ctx.setLineDash([4, 4]);
        
        ctx.beginPath();
        let firstPoint = true;
        
        comparePrices.forEach(item => {
          const x = getX(item.index);
          const y = getY(item.price);
          
          if (firstPoint) {
            ctx.moveTo(x, y);
            firstPoint = false;
          } else {
            ctx.lineTo(x, y);
          }
        });
        
        ctx.stroke();
        ctx.setLineDash([]);
      }
      
      // Draw area under the price line
      ctx.beginPath();
      ctx.moveTo(getX(0), getY(prices[0]));
      
      for (let i = 1; i < prices.length; i++) {
        ctx.lineTo(getX(i), getY(prices[i]));
      }
      
      ctx.lineTo(getX(prices.length - 1), height - padding.bottom);
      ctx.lineTo(getX(0), height - padding.bottom);
      ctx.closePath();
      
      // Create gradient for area fill
      const gradient = ctx.createLinearGradient(0, padding.top, 0, height - padding.bottom);
      gradient.addColorStop(0, 'rgba(0, 102, 204, 0.2)');
      gradient.addColorStop(1, 'rgba(0, 102, 204, 0.01)');
      
      ctx.fillStyle = gradient;
      ctx.fill();
      
      // Draw price line
      ctx.strokeStyle = '#0066CC';
      ctx.lineWidth = 2.5;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      
      ctx.beginPath();
      ctx.moveTo(getX(0), getY(prices[0]));
      
      for (let i = 1; i < prices.length; i++) {
        ctx.lineTo(getX(i), getY(prices[i]));
      }
      
      ctx.stroke();
      
      // Add data points
      const pointCount = Math.min(7, prices.length);
      
      for (let i = 0; i < pointCount; i++) {
        const index = Math.floor(i * (prices.length - 1) / (pointCount - 1));
        const x = getX(index);
        const y = getY(prices[index]);
        
        // Draw point
        ctx.fillStyle = '#0066CC';
        ctx.beginPath();
        ctx.arc(x, y, 5, 0, Math.PI * 2);
        ctx.fill();
        
        // Draw white border
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(x, y, 5, 0, Math.PI * 2);
        ctx.stroke();
      }
      
      // Add legend
      const legendY = 15;
      
      // Draw current price legend
      ctx.fillStyle = 'white';
      ctx.fillRect(padding.left, legendY, 160, 50);
      ctx.strokeStyle = '#eee';
      ctx.lineWidth = 1;
      ctx.strokeRect(padding.left, legendY, 160, 50);
      
      // Price line
      ctx.strokeStyle = '#0066CC';
      ctx.lineWidth = 2.5;
      ctx.beginPath();
      ctx.moveTo(padding.left + 15, legendY + 20);
      ctx.lineTo(padding.left + 45, legendY + 20);
      ctx.stroke();
      
      // Price point
      ctx.fillStyle = '#0066CC';
      ctx.beginPath();
      ctx.arc(padding.left + 30, legendY + 20, 4, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 1.5;
      ctx.beginPath();
      ctx.arc(padding.left + 30, legendY + 20, 4, 0, Math.PI * 2);
      ctx.stroke();
      
      // Price text
      ctx.fillStyle = '#333';
      ctx.font = '12px sans-serif';
      ctx.textAlign = 'left';
      ctx.textBaseline = 'middle';
      ctx.fillText('Gjeldende pris', padding.left + 55, legendY + 20);
      
      // Reference price line
      if (comparePrices.length > 0) {
        ctx.strokeStyle = '#888';
        ctx.lineWidth = 1.5;
        ctx.setLineDash([4, 4]);
        ctx.beginPath();
        ctx.moveTo(padding.left + 15, legendY + 35);
        ctx.lineTo(padding.left + 45, legendY + 35);
        ctx.stroke();
        ctx.setLineDash([]);
        
        // Reference price text
        ctx.fillStyle = '#333';
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        ctx.fillText('Referansepris', padding.left + 55, legendY + 35);
      }
      
      // Add date range text
      if (dates.length > 0) {
        const startDate = dates[0];
        const endDate = dates[dates.length - 1];
        
        const formatDate = (date) => {
          return date.toLocaleDateString('nb-NO', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        };
        
        const dateRangeText = `Prishistorikk fra ${formatDate(startDate)} til ${formatDate(endDate)}`;
        
        ctx.fillStyle = '#666';
        ctx.font = '11px sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'bottom';
        ctx.fillText(dateRangeText, width / 2, height - 4);
      }
      
      // Create interactive hover tooltip using an overlay
      const overlay = document.createElement('div');
      overlay.style.position = 'absolute';
      overlay.style.top = '0';
      overlay.style.left = '0';
      overlay.style.width = '100%';
      overlay.style.height = '100%';
      overlay.style.cursor = 'pointer';
      chartContainer.appendChild(overlay);
      
      // Create tooltip
      const tooltip = document.createElement('div');
      tooltip.className = 'price-tooltip';
      tooltip.style.position = 'absolute';
      tooltip.style.display = 'none';
      tooltip.style.padding = '6px 10px';
      tooltip.style.backgroundColor = 'rgba(50, 50, 50, 0.9)';
      tooltip.style.color = 'white';
      tooltip.style.borderRadius = '4px';
      tooltip.style.fontSize = '12px';
      tooltip.style.pointerEvents = 'none';
      tooltip.style.zIndex = '100';
      tooltip.style.whiteSpace = 'nowrap';
      tooltip.style.transform = 'translate(-50%, -100%)';
      tooltip.style.marginTop = '-5px';
      chartContainer.appendChild(tooltip);
      
      // Add mousemove handler for the tooltip
      overlay.addEventListener('mousemove', function(e) {
        const rect = overlay.getBoundingClientRect();
        const x = e.clientX - rect.left;
        
        // Only show tooltip in the drawable area
        if (x < padding.left || x > width - padding.right) {
          tooltip.style.display = 'none';
          return;
        }
        
        // Find the closest data point
        const index = Math.round((x - padding.left) / drawableWidth * (prices.length - 1));
        
        if (index >= 0 && index < prices.length) {
          const dataX = getX(index);
          const dataY = getY(prices[index]);
          
          // Position tooltip
          tooltip.style.left = `${dataX}px`;
          tooltip.style.top = `${dataY}px`;
          
          // Format date
          let dateStr = 'Ukjent dato';
          if (dates[index]) {
            dateStr = dates[index].toLocaleDateString('nb-NO', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });
          }
          
          // Format price
          const priceStr = prices[index].toFixed(2).replace('.', ',');
          
          // Calculate percentage difference if reference price exists
          let percentageStr = '';
          if (priceData[index] && priceData[index].compareAtPrice) {
            const comparePrice = parseFloat(priceData[index].compareAtPrice);
            if (!isNaN(comparePrice) && comparePrice > 0) {
              const percentage = Math.round((comparePrice - prices[index]) / comparePrice * 100);
              percentageStr = ` (${percentage}% rabatt)`;
            }
          }
          
          // Set tooltip content
          tooltip.textContent = `${dateStr}: ${priceStr} kr${percentageStr}`;
          tooltip.style.display = 'block';
        } else {
          tooltip.style.display = 'none';
        }
      });
      
      // Hide tooltip when mouse leaves
      overlay.addEventListener('mouseleave', function() {
        tooltip.style.display = 'none';
      });
      
    } catch (error) {
      console.error('Chart rendering error:', error);
      
      // Show error message
      element.innerHTML = `
        <div class="price-history-placeholder">
          <svg viewBox="0 0 24 24" width="24" height="24" style="color: #999;">
            <path fill="currentColor" d="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-2h2v2zM13,13h-2L11,7h2l0,6z"/>
          </svg>
          <span>Kunne ikke vise prishistorikk-grafen</span>
        </div>
      `;
    }
  }
});
</script>