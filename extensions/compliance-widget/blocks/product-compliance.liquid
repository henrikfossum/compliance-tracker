{% comment %}
  @name Price Compliance Widget
  @description Displays price information in compliance with Norwegian pricing regulations
  @icon price-lookup
  @category products
{% endcomment %}

<div class="norwegian-compliance-container" 
     data-product-id="{{ product.id }}" 
     data-variant-id="{{ product.selected_or_first_available_variant.id }}"
     data-display-style="{{ block.settings.display_style }}"
     style="
        --background-color: {{ block.settings.background_color }};
        --text-color: {{ block.settings.text_color }};
        --sale-price-color: {{ block.settings.sale_price_color }};
        --reference-price-color: {{ block.settings.reference_price_color }};
        --border-color: {{ block.settings.border_color }};
        --border-width: {{ block.settings.border_width }}px;
        --border-style: {{ block.settings.border_style }};
        --border-radius: {{ block.settings.border_radius }}px;
        --font-size: {{ block.settings.font_size }}px;
     ">
  
  <div class="norwegian-compliance-pricing">
    {% if product.compare_at_price > product.price %}
      <!-- Sale mode - show full compliance information -->
      <div class="current-price-container">
        <span class="current-price">{{ product.price | money }}</span>
        {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round %}
        {% assign discount_text = block.settings.discount_label | replace: "{percent}", discount_percentage %}
        <span class="discount-badge">{{ discount_text }}</span>
      </div>
      
      <!-- Reference Price - Most important part for compliance -->
      <div class="reference-price-container">
        <span class="reference-price">{{ product.compare_at_price | money }}</span>
        <span class="reference-price-label">{{ block.settings.reference_price_label }}</span>
      </div>
      
      <!-- Sale Period Information - For compliance with sale duration rules -->
      {% if product.metafields.compliance.sale_start_date %}
        <div class="sale-dates">
          <span class="sale-period">{{ block.settings.sale_period_label }}: 
            {{ product.metafields.compliance.sale_start_date | date: "%d.%m.%Y" }} 
            {% if product.metafields.compliance.sale_end_date %} 
              - {{ product.metafields.compliance.sale_end_date | date: "%d.%m.%Y" }}
            {% endif %}
          </span>
        </div>
      {% endif %}
      
      <!-- Regular price if available and if display style is detailed -->
      {% if block.settings.display_style == 'detailed' and product.metafields.compliance.original_price %}
        <div class="regular-price-container">
          <span class="regular-price-label">{{ block.settings.regular_price_label }}:</span>
          <span class="regular-price">{{ product.metafields.compliance.original_price | money }}</span>
        </div>
      {% endif %}
      
    {% else %}
      <!-- Regular price mode - show simplified display -->
      <div class="regular-mode-message">
        <div class="price-info">
          <span class="current-price regular">{{ product.price | money }}</span>
          <span class="regular-price-label">{{ block.settings.regular_price_label }}</span>
        </div>
        
        {% if block.settings.display_style == 'detailed' and product.metafields.compliance.price_tracking_since %}
          <div class="tracking-info">
            <span class="tracking-since">{{ block.settings.tracking_since_label }}: {{ product.metafields.compliance.price_tracking_since | date: "%d.%m.%Y" }}</span>
          </div>
        {% endif %}
      </div>
    {% endif %}
  </div>
  
  {% if block.settings.show_price_history and product.metafields.compliance.price_history %}
    <div class="price-history-container">
      <details class="price-history-details">
        <summary>{{ block.settings.price_history_label }}</summary>
        <div class="price-history-graph" data-history="{{ product.metafields.compliance.price_history | json }}">
          <!-- Price history graph will be rendered by JavaScript -->
          <div class="price-history-placeholder">{{ block.settings.loading_label }}</div>
        </div>
      </details>
    </div>
  {% endif %}
  
  {% if block.settings.show_compliance_status %}
    <div class="compliance-status {% if product.metafields.compliance.is_compliant != false %}compliant{% else %}non-compliant{% endif %}">
      <span class="compliance-icon"></span>
      <span class="compliance-text">
        {% if product.metafields.compliance.is_compliant != false %}
          {{ block.settings.compliant_message }}
        {% else %}
          {{ block.settings.non_compliant_message }}
        {% endif %}
      </span>
    </div>
  {% endif %}
</div>

{% schema %}
{
  "name": "Price Compliance Widget",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Display Settings"
    },
    {
      "type": "select",
      "id": "display_style",
      "label": "Display style",
      "options": [
        {
          "value": "minimal",
          "label": "Minimal (basic information only)"
        },
        {
          "value": "compact",
          "label": "Compact"
        },
        {
          "value": "detailed",
          "label": "Detailed"
        }
      ],
      "default": "detailed"
    },
    {
      "type": "checkbox",
      "id": "show_price_history",
      "label": "Show price history",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_compliance_status",
      "label": "Show compliance status",
      "default": true
    },
    {
      "type": "header",
      "content": "Visual Customization"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f9f9f9"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "sale_price_color",
      "label": "Sale price color",
      "default": "#CC0000"
    },
    {
      "type": "color",
      "id": "reference_price_color", 
      "label": "Reference price color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e5e5e5"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "select",
      "id": "border_style",
      "label": "Border style",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "solid",
          "label": "Solid"
        },
        {
          "value": "dashed",
          "label": "Dashed"
        },
        {
          "value": "dotted",
          "label": "Dotted"
        }
      ],
      "default": "solid"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 4
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Base font size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Text Customization"
    },
    {
      "type": "text",
      "id": "discount_label",
      "label": "Discount label",
      "default": "Save {percent}%"
    },
    {
      "type": "text",
      "id": "reference_price_label",
      "label": "Reference price label",
      "default": "Lowest price in the last 30 days"
    },
    {
      "type": "text",
      "id": "sale_period_label",
      "label": "Sale period label",
      "default": "Sale period"
    },
    {
      "type": "text",
      "id": "regular_price_label",
      "label": "Regular price label",
      "default": "Regular price"
    },
    {
      "type": "text",
      "id": "tracking_since_label",
      "label": "Price tracking since label",
      "default": "Price tracked since"
    },
    {
      "type": "text",
      "id": "price_history_label",
      "label": "Price history label",
      "default": "Show price history"
    },
    {
      "type": "text",
      "id": "loading_label",
      "label": "Loading label",
      "default": "Loading price history..."
    },
    {
      "type": "text",
      "id": "compliant_message",
      "label": "Compliant status message",
      "default": "This product's pricing complies with Norwegian regulations"
    },
    {
      "type": "text",
      "id": "non_compliant_message",
      "label": "Non-compliant status message",
      "default": "Contact the store for more information about price history"
    }
  ]
}
{% endschema %}

<style>
.norwegian-compliance-container {
  margin: 1rem 0;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  line-height: 1.4;
  padding: 1rem;
  background-color: var(--background-color, #f9f9f9);
  color: var(--text-color, #333333);
  border: var(--border-width, 1px) var(--border-style, solid) var(--border-color, #e5e5e5);
  border-radius: var(--border-radius, 4px);
  font-size: var(--font-size, 14px);
}

/* Price containers */
.norwegian-compliance-pricing {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/* Current sale price */
.current-price-container {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.current-price {
  font-size: calc(var(--font-size) * 1.5);
  font-weight: 700;
  color: var(--sale-price-color, #CC0000);
}

.current-price.regular {
  color: var(--text-color, #333);
}

.discount-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: var(--sale-price-color, #CC0000);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 3px;
  font-size: calc(var(--font-size) * 0.85);
  font-weight: 600;
}

/* Regular mode display */
.regular-mode-message {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.price-info {
  display: flex;
  align-items: baseline;
  gap: 0.75rem;
}

.tracking-info {
  font-size: calc(var(--font-size) * 0.85);
  color: var(--reference-price-color, #666);
}

.tracking-since {
  font-style: italic;
}

/* Reference price (førpris) - Key for compliance */
.reference-price-container {
  display: flex;
  align-items: baseline;
  flex-wrap: wrap;
  gap: 0.5rem;
  padding: 0.5rem;
  background-color: rgba(0, 0, 0, 0.05);
  border-radius: 4px;
  border-left: 3px solid var(--reference-price-color, #666);
}

.reference-price {
  text-decoration: line-through;
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 1.1);
  font-weight: 500;
}

.reference-price-label {
  font-size: calc(var(--font-size) * 0.85);
  font-weight: 600;
  color: var(--reference-price-color, #666);
}

/* Regular price if shown */
.regular-price-container {
  font-size: calc(var(--font-size) * 0.85);
  color: var(--reference-price-color, #666);
  margin-top: 0.25rem;
}

/* Sale dates */
.sale-dates {
  font-size: calc(var(--font-size) * 0.85);
  color: var(--reference-price-color, #666);
  margin-top: 0.5rem;
  padding: 0.5rem;
  background-color: rgba(0, 0, 0, 0.03);
  border-radius: 4px;
}

/* Price history section */
.price-history-container {
  margin-top: 1rem;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  padding-top: 1rem;
}

.price-history-details summary {
  cursor: pointer;
  color: #2c6ecb;
  font-size: calc(var(--font-size) * 0.95);
}

.price-history-details summary:hover {
  text-decoration: underline;
}

.price-history-graph {
  height: 120px;
  margin-top: 1rem;
  position: relative;
  background: rgba(0, 0, 0, 0.03);
  border-radius: 4px;
  padding: 0.5rem;
}

.price-history-placeholder {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--reference-price-color, #666);
  font-size: calc(var(--font-size) * 0.9);
}

/* Compliance status section */
.compliance-status {
  display: flex;
  align-items: center;
  padding: 0.75rem;
  margin-top: 1rem;
  border-radius: 4px;
  font-size: calc(var(--font-size) * 0.9);
}

.compliance-status.compliant {
  background-color: #eefbf3;
  color: #1d934a;
}

.compliance-status.non-compliant {
  background-color: #fff8e1;
  color: #e67e22;
}

.compliance-icon {
  width: 20px;
  height: 20px;
  margin-right: 0.75rem;
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
}

.compliance-status.compliant .compliance-icon {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24'%3E%3Cpath fill='%231d934a' d='M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4M11,16.5L6.5,12L7.91,10.59L11,13.67L16.59,8.09L18,9.5L11,16.5Z'%3E%3C/path%3E%3C/svg%3E");
}

.compliance-status.non-compliant .compliance-icon {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24'%3E%3Cpath fill='%23e67e22' d='M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z'%3E%3C/path%3E%3C/svg%3E");
}

/* Display style adjustments */
/* Minimal style */
[data-display-style="minimal"] .sale-dates,
[data-display-style="minimal"] .regular-price-container,
[data-display-style="minimal"] .tracking-info,
[data-display-style="minimal"] .price-history-container {
  display: none;
}

[data-display-style="minimal"] .compliance-status {
  margin-top: 0.5rem;
  padding: 0.5rem;
  font-size: calc(var(--font-size) * 0.8);
}

/* Compact style */
[data-display-style="compact"] .norwegian-compliance-pricing {
  flex-direction: row;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

[data-display-style="compact"] .reference-price-container {
  flex: 1;
  min-width: 200px;
}

[data-display-style="compact"] .sale-dates,
[data-display-style="compact"] .regular-price-container {
  margin-top: 0;
}

[data-display-style="compact"] .price-history-container,
[data-display-style="compact"] .compliance-status {
  margin-top: 0.75rem;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .norwegian-compliance-container {
    padding: 0.75rem;
  }
  
  .current-price {
    font-size: calc(var(--font-size) * 1.3);
  }
  
  .reference-price,
  .reference-price-label {
    font-size: calc(var(--font-size) * 0.8);
  }
  
  [data-display-style="compact"] .norwegian-compliance-pricing {
    flex-direction: column;
    align-items: flex-start;
  }
  
  [data-display-style="compact"] .reference-price-container {
    width: 100%;
  }
  
  .price-history-graph {
    height: 100px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Find all compliance containers on the page
  const containers = document.querySelectorAll('.norwegian-compliance-container');
  
  containers.forEach(container => {
    const productId = container.getAttribute('data-product-id');
    const variantId = container.getAttribute('data-variant-id');
    
    if (!productId || !variantId) return;
    
    // Initialize the price history chart with loading state
    initPriceHistoryChart(container);
    
    // Fetch real-time compliance data from the app
    fetchComplianceData(container, productId, variantId);
  });
  
  // Initialize price history chart with loading state
  function initPriceHistoryChart(container) {
    const historyElement = container.querySelector('.price-history-graph');
    if (!historyElement) return;
    
    historyElement.innerHTML = '<div class="price-history-placeholder">Loading price history...</div>';
  }
  
  // Create demo price history data for testing
  function createDemoData(endDate) {
    const demoData = [];
    const regularPrice = 149.99;
    const salePrice = 99.99;
    
    // Generate 90 days of data
    for (let i = 90; i >= 0; i--) {
      const date = new Date(endDate);
      date.setDate(date.getDate() - i);
      
      // Before 30 days ago - regular price
      if (i > 30) {
        demoData.push({
          date: date.toISOString().split('T')[0],
          price: regularPrice,
          compareAtPrice: null
        });
      } 
      // Last 30 days - sale price
      else {
        demoData.push({
          date: date.toISOString().split('T')[0],
          price: salePrice,
          compareAtPrice: regularPrice
        });
      }
    }
    
    return demoData;
  }
  
  // Render a price history chart with improved styling and error handling
  function renderPriceHistoryChart(element, priceData) {
    // Clear the element
    element.innerHTML = '';
    
    if (!priceData || priceData.length === 0) {
      element.innerHTML = '<div class="price-history-placeholder">No price history available</div>';
      return;
    }
    
    // Sample implementation of a simple SVG line chart
    const width = element.clientWidth || 400;
    const height = element.clientHeight || 100;
    const padding = 20;
    
    // Calculate min and max values
    const prices = priceData.map(d => parseFloat(d.price));
    const comparePrices = priceData
      .filter(d => d.compareAtPrice)
      .map(d => parseFloat(d.compareAtPrice));
    
    const allPrices = [...prices, ...comparePrices].filter(p => !isNaN(p));
    
    // If no valid prices, show an error
    if (allPrices.length === 0) {
      element.innerHTML = '<div class="price-history-placeholder">Invalid price data</div>';
      return;
    }
    
    const minPrice = Math.min(...allPrices) * 0.9; // 10% padding
    const maxPrice = Math.max(...allPrices) * 1.1; // 10% padding
    
    // Create SVG
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', '100%');
    svg.setAttribute('height', '100%');
    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
    
    // Add axes
    const xAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    xAxis.setAttribute('x1', padding);
    xAxis.setAttribute('y1', height - padding);
    xAxis.setAttribute('x2', width - padding);
    xAxis.setAttribute('y2', height - padding);
    xAxis.setAttribute('stroke', '#ddd');
    xAxis.setAttribute('stroke-width', '1');
    svg.appendChild(xAxis);
    
    const yAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    yAxis.setAttribute('x1', padding);
    yAxis.setAttribute('y1', padding);
    yAxis.setAttribute('x2', padding);
    yAxis.setAttribute('y2', height - padding);
    yAxis.setAttribute('stroke', '#ddd');
    yAxis.setAttribute('stroke-width', '1');
    svg.appendChild(yAxis);
    
    // Scale functions
    const scaleX = (i) => padding + ((width - 2 * padding) * i / (priceData.length - 1));
    const scaleY = (price) => height - padding - ((height - 2 * padding) * (price - minPrice) / (maxPrice - minPrice));
    
    // Create polyline for regular price
    const priceLine = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
    const pricePoints = priceData.map((d, i) => {
      const price = parseFloat(d.price);
      return !isNaN(price) ? `${scaleX(i)},${scaleY(price)}` : '';
    }).filter(p => p).join(' ');
    
    priceLine.setAttribute('points', pricePoints);
    priceLine.setAttribute('fill', 'none');
    priceLine.setAttribute('stroke', '#008060');
    priceLine.setAttribute('stroke-width', '2');
    svg.appendChild(priceLine);
    
    // Create price circles for better visibility
    priceData.forEach((d, i) => {
      const price = parseFloat(d.price);
      if (isNaN(price)) return;
      
      // Only add circles for every 10th point to avoid crowding
      if (i % 10 === 0 || i === priceData.length - 1) {
        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('cx', scaleX(i));
        circle.setAttribute('cy', scaleY(price));
        circle.setAttribute('r', '3');
        circle.setAttribute('fill', '#008060');
        svg.appendChild(circle);
      }
    });
    
    // Create polyline for compare-at price (reference price) if available
    const comparePriceData = priceData.filter(d => d.compareAtPrice);
    if (comparePriceData.length > 0) {
      const compareAtPriceLine = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
      const comparePoints = comparePriceData.map((d) => {
        const originalIndex = priceData.findIndex(p => p.date === d.date);
        const comparePrice = parseFloat(d.compareAtPrice);
        return !isNaN(comparePrice) ? `${scaleX(originalIndex)},${scaleY(comparePrice)}` : '';
      }).filter(p => p).join(' ');
      
      compareAtPriceLine.setAttribute('points', comparePoints);
      compareAtPriceLine.setAttribute('fill', 'none');
      compareAtPriceLine.setAttribute('stroke', '#637381');
      compareAtPriceLine.setAttribute('stroke-width', '2');
      compareAtPriceLine.setAttribute('stroke-dasharray', '4,4');
      svg.appendChild(compareAtPriceLine);
      
      // Add circles for compare prices
      comparePriceData.forEach((d) => {
        const originalIndex = priceData.findIndex(p => p.date === d.date);
        const comparePrice = parseFloat(d.compareAtPrice);
        if (isNaN(comparePrice)) return;
        
        // Only add circles for every 10th point
        if (originalIndex % 10 === 0 || originalIndex === priceData.length - 1) {
          const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          circle.setAttribute('cx', scaleX(originalIndex));
          circle.setAttribute('cy', scaleY(comparePrice));
          circle.setAttribute('r', '3');
          circle.setAttribute('fill', '#637381');
          circle.setAttribute('stroke', '#fff');
          circle.setAttribute('stroke-width', '1');
          svg.appendChild(circle);
        }
      });
    }
    
    // Add a highlight for sale start
    if (comparePriceData.length > 0) {
      const firstSale = comparePriceData[0];
      const saleStartIndex = priceData.findIndex(p => p.date === firstSale.date);
      
      if (saleStartIndex > 0) {
        // Add a vertical line for sale start
        const saleLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        saleLine.setAttribute('x1', scaleX(saleStartIndex));
        saleLine.setAttribute('y1', padding);
        saleLine.setAttribute('x2', scaleX(saleStartIndex));
        saleLine.setAttribute('y2', height - padding);
        saleLine.setAttribute('stroke', '#5c6ac4');
        saleLine.setAttribute('stroke-width', '1');
        saleLine.setAttribute('stroke-dasharray', '4,4');
        svg.appendChild(saleLine);
        
        // Add a "Sale start" label
        const saleText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        saleText.setAttribute('x', scaleX(saleStartIndex));
        saleText.setAttribute('y', padding - 5);
        saleText.setAttribute('font-size', '10');
        saleText.setAttribute('text-anchor', 'middle');
        saleText.setAttribute('fill', '#5c6ac4');
        saleText.textContent = 'Sale Start';
        svg.appendChild(saleText);
      }
    }
    
    // Add legend
    const legend = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    legend.setAttribute('transform', `translate(${width - 100}, 10)`);
    
    const legendBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    legendBg.setAttribute('width', '90');
    legendBg.setAttribute('height', '40');
    legendBg.setAttribute('rx', '4');
    legendBg.setAttribute('fill', 'white');
    legendBg.setAttribute('fill-opacity', '0.8');
    legend.appendChild(legendBg);
    
    // Current price line
    const currentPriceLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    currentPriceLine.setAttribute('x1', '5');
    currentPriceLine.setAttribute('y1', '15');
    currentPriceLine.setAttribute('x2', '25');
    currentPriceLine.setAttribute('y2', '15');
    currentPriceLine.setAttribute('stroke', '#008060');
    currentPriceLine.setAttribute('stroke-width', '2');
    legend.appendChild(currentPriceLine);
    
    const currentPriceText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    currentPriceText.setAttribute('x', '30');
    currentPriceText.setAttribute('y', '18');
    currentPriceText.setAttribute('font-size', '10');
    currentPriceText.setAttribute('fill', '#333');
    currentPriceText.textContent = 'Price';
    legend.appendChild(currentPriceText);
    
    // Reference price line
    const refPriceLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    refPriceLine.setAttribute('x1', '5');
    refPriceLine.setAttribute('y1', '30');
    refPriceLine.setAttribute('x2', '25');
    refPriceLine.setAttribute('y2', '30');
    refPriceLine.setAttribute('stroke', '#637381');
    refPriceLine.setAttribute('stroke-width', '2');
    refPriceLine.setAttribute('stroke-dasharray', '4,4');
    legend.appendChild(refPriceLine);
    
    const refPriceText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    refPriceText.setAttribute('x', '30');
    refPriceText.setAttribute('y', '33');
    refPriceText.setAttribute('font-size', '10');
    refPriceText.setAttribute('fill', '#333');
    refPriceText.textContent = 'Ref';
    legend.appendChild(refPriceText);
    
    svg.appendChild(legend);
    
    // Add to element
    element.appendChild(svg);
    
    // Add date range text
    if (priceData.length > 0) {
      const dateRange = document.createElement('div');
      dateRange.className = 'price-history-date-range';
      dateRange.style.fontSize = '10px';
      dateRange.style.color = '#637381';
      dateRange.style.textAlign = 'center';
      dateRange.style.marginTop = '5px';
      
      let startDate, endDate;
      try {
        startDate = new Date(priceData[0].date);
        endDate = new Date(priceData[priceData.length - 1].date);
      } catch (e) {
        // Default to current date range if parsing fails
        const today = new Date();
        endDate = today;
        startDate = new Date(today);
        startDate.setDate(startDate.getDate() - 90);
      }
      
      const formatDate = (date) => {
        try {
          return date.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } catch (e) {
          return 'Invalid date';
        }
      };
      
      dateRange.textContent = `${formatDate(startDate)} - ${formatDate(endDate)}`;
      element.appendChild(dateRange);
    }
  }
  
  // Fetch compliance data from the app's API with fallback
function fetchComplianceData(container, productId, variantId) {
  // Get shop domain from URL
  const shopDomain = window.Shopify ? window.Shopify.shop : window.location.hostname;
  
  // Try API URL formats that match your existing routes
  const apiUrl1 = `/apps/compliance/${productId}/${variantId}?shop=${shopDomain}`;
  const apiUrl2 = `/apps/compliance/${variantId}?shop=${shopDomain}`;
  const apiUrl3 = `/apps/compliance?productId=${productId}&variantId=${variantId}&shop=${shopDomain}`;

    
  // Use fallback demo data immediately for better user experience
  const today = new Date();
  const demoData = createDemoData(today);
  
  const historyElement = container.querySelector('.price-history-graph');
  if (historyElement) {
    renderPriceHistoryChart(historyElement, demoData);
  }
  
  // Function to try a specific URL format
  function tryFetchUrl(url) {
    return fetch(url)
      .then(response => {
        if (!response.ok) {
          throw new Error(`API response not OK: ${response.status}`);
        }
        return response.json();
      });
  }
  
  // Try each URL format in succession
  tryFetchUrl(apiUrl1)
    .catch(() => tryFetchUrl(apiUrl2))
    .catch(() => tryFetchUrl(apiUrl3))
    .then(data => {
      if (!data.success) {
        throw new Error(data.error || 'Unknown error');
      }
      
      // Update compliance status
      updateComplianceStatus(container, data);
      
      // Update price history if we received it
      if (data.priceHistory && data.priceHistory.length > 0) {
        const historyElement = container.querySelector('.price-history-graph');
        if (historyElement) {
          renderPriceHistoryChart(historyElement, data.priceHistory);
        }
      }
    })
    .catch(error => {
      console.log('Could not fetch compliance data:', error);
      // Chart is already rendered with demo data, so no further action needed
    });
}
  
  // Update compliance status based on API response
  function updateComplianceStatus(container, data) {
    const statusElement = container.querySelector('.compliance-status');
    if (!statusElement) return;
    
    // Update class
    if (data.isCompliant) {
      statusElement.classList.add('compliant');
      statusElement.classList.remove('non-compliant');
    } else {
      statusElement.classList.add('non-compliant');
      statusElement.classList.remove('compliant');
    }
    
    // Update text content if we have specific issues
    const textElement = statusElement.querySelector('.compliance-text');
    if (textElement && data.issues && data.issues.length > 0) {
      // Just show the first issue for simplicity
      textElement.textContent = data.issues[0].message;
    }
  }
});
</script>